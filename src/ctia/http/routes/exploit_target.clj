(ns ctia.http.routes.exploit-target
  (:require [schema.core :as s]
            [compojure.api.sweet :refer :all]
            [ring.util.http-response :refer :all]
            [ctia.flows.crud :as flows]
            [ctia.store :refer :all]
            [ctia.schemas.exploit-target :refer [NewExploitTarget
                                                 StoredExploitTarget
                                                 realize-exploit-target]]))

(defroutes exploit-target-routes
  (context "/exploit-target" []
    :tags ["ExploitTarget"]
    (POST "/" []
      :return StoredExploitTarget
      :body [exploit-target NewExploitTarget {:description "a new ExploitTarget"}]
      :summary "Adds a new ExploitTarget"
      :header-params [api_key :- (s/maybe s/Str)]
      :capabilities #{:create-exploit-target :admin}
      :login login
      (ok (flows/create-flow :realize-fn realize-exploit-target
                             :store-fn #(create-exploit-target @exploit-target-store %)
                             :object-type :exploit-target
                             :login login
                             :object exploit-target)))
    (PUT "/:id" []
      :return StoredExploitTarget
      :body [exploit-target
             NewExploitTarget
             {:description "an updated ExploitTarget"}]
      :summary "Updates an ExploitTarget"
      :path-params [id :- s/Str]
      :header-params [api_key :- (s/maybe s/Str)]
      :capabilities #{:create-exploit-target :admin}
      :login login
      (ok (flows/update-flow :get-fn #(read-exploit-target @exploit-target-store %)
                             :realize-fn realize-exploit-target
                             :update-fn #(update-exploit-target @exploit-target-store (:id %) %)
                             :object-type :exploit-target
                             :id id
                             :login login
                             :object exploit-target)))
    (GET "/:id" []
      :return (s/maybe StoredExploitTarget)
      :summary "Gets an ExploitTarget by ID"
      :path-params [id :- s/Str]
      :header-params [api_key :- (s/maybe s/Str)]
      :capabilities #{:read-exploit-target :admin}
      (if-let [d (read-exploit-target @exploit-target-store id)]
        (ok d)
        (not-found)))
    (DELETE "/:id" []
      :no-doc true
      :path-params [id :- s/Str]
      :summary "Deletes an ExploitTarget"
      :header-params [api_key :- (s/maybe s/Str)]
      :capabilities #{:delete-exploit-target :admin}
      (if (flows/delete-flow :get-fn #(read-exploit-target @exploit-target-store %)
                             :delete-fn #(delete-exploit-target @exploit-target-store %)
                             :object-type :exploit-target
                             :id id)
        (no-content)
        (not-found)))))
